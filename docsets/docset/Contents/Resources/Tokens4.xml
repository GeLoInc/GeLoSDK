<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GeLoBeaconManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GeLoBeaconManager</TokenIdentifier>
			<Abstract type="html">GeLoBeaconManager scans for beacons and also maintains a list of beacons it can find.</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GeLoBeaconManager/sharedInstance</TokenIdentifier>
			<Abstract type="html">The class method used to access the beacon manager singleton.</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>+ (GeLoBeaconManager *)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">an instance of beacon manager.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/startScanningForBeacons</TokenIdentifier>
			<Abstract type="html">Start the beacon manager scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)startScanningForBeacons</Declaration>
			
			
			<Anchor>//api/name/startScanningForBeacons</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/isScanning</TokenIdentifier>
			<Abstract type="html">Get whether or not the beacon manager is actively scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)isScanning</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean indicating the scanning state</Abstract></ReturnValue>
			<Anchor>//api/name/isScanning</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/stopScanningForBeacons</TokenIdentifier>
			<Abstract type="html">Stop the beacon manager from scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)stopScanningForBeacons</Declaration>
			
			
			<Anchor>//api/name/stopScanningForBeacons</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setFalloff:forId:</TokenIdentifier>
			<Abstract type="html">Sets the threshold for the specified beacon</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setFalloff:(NSInteger)_falloff forId:(NSUInteger)_id</Declaration>
			<Parameters>
				<Parameter>
					<Name>_falloff</Name>
					<Abstract type="html">the threshold for determining if a beacon is near</Abstract>
				</Parameter><Parameter>
					<Name>_id</Name>
					<Abstract type="html">the id of the beacon to apply the threshold to</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFalloff:forId:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setDefaultFalloff:</TokenIdentifier>
			<Abstract type="html">Sets the default threshold to apply to beacons without a threshold of their own</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setDefaultFalloff:(NSInteger)_falloff</Declaration>
			<Parameters>
				<Parameter>
					<Name>_falloff</Name>
					<Abstract type="html">the threshold for determining if a beacon is near</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultFalloff:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setDefaultTimeToLive:</TokenIdentifier>
			<Abstract type="html">Sets the time a beacon will be allowed to remain in the known beacons list</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setDefaultTimeToLive:(NSUInteger)ttl</Declaration>
			<Parameters>
				<Parameter>
					<Name>ttl</Name>
					<Abstract type="html">the number of seconds a beacon will remain &quot;known&quot;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultTimeToLive:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setDefaultSignalCeiling:</TokenIdentifier>
			<Abstract type="html">Sets the default minimum signal strength that the SDK will pay attention too</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setDefaultSignalCeiling:(NSInteger)ceiling</Declaration>
			<Parameters>
				<Parameter>
					<Name>ceiling</Name>
					<Abstract type="html">minimum signal strength</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultSignalCeiling:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/unsetNearestBeacon</TokenIdentifier>
			<Abstract type="html">Unsets the nearest beacon.</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)unsetNearestBeacon</Declaration>
			
			
			<Anchor>//api/name/unsetNearestBeacon</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/knownBeacons</TokenIdentifier>
			<Abstract type="html">Get a list of the beacons currently in range</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (NSArray *)knownBeacons</Declaration>
			
			<ReturnValue><Abstract type="html">an array of GeLoBeacon instances</Abstract></ReturnValue>
			<Anchor>//api/name/knownBeacons</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/knownTourBeacons</TokenIdentifier>
			<Abstract type="html">Get a list of beacons that belong to the current tour.</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (NSArray *)knownTourBeacons</Declaration>
			
			<ReturnValue><Abstract type="html">an array of GeLoBeacon instances.</Abstract></ReturnValue>
			<Anchor>//api/name/knownTourBeacons</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/nearestBeacon</TokenIdentifier>
			<Abstract type="html">Get the nearest beacon</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (GeLoBeacon *)nearestBeacon</Declaration>
			
			<ReturnValue><Abstract type="html">an instance of GeLoBeacon</Abstract></ReturnValue>
			<Anchor>//api/name/nearestBeacon</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setNearestBeacon:</TokenIdentifier>
			<Abstract type="html">Sets the nearest beacon. Posts a kGeLoNearestBeaconChanged notification
if the given beacon is different than the current nearest beacon. Returns
the nearest beacon.</Abstract>
			<DeclaredIn>GeLoBeaconManager.m</DeclaredIn>
			
			<Declaration>- (id)setNearestBeacon:(GeLoBeacon *)beacon</Declaration>
			<Parameters>
				<Parameter>
					<Name>beacon</Name>
					<Abstract type="html">The nearest beacon.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setNearestBeacon:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/expireBeacon:</TokenIdentifier>
			<Abstract type="html">Expires the nearest beacon by clearing the nearest beacon and posting a
kGeLoNearestBeaconExpired notification.</Abstract>
			<DeclaredIn>GeLoBeaconManager.m</DeclaredIn>
			
			<Declaration>- (void)expireBeacon:(GeLoBeacon *)beacon</Declaration>
			<Parameters>
				<Parameter>
					<Name>beacon</Name>
					<Abstract type="html">The expired beacon.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/expireBeacon:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
	</File>
</Tokens>